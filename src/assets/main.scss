@import 'bootstrap/scss/functions';
@import 'bootstrap/scss/variables';
@import 'bootstrap/scss/mixins';

// Custom color variables
$custom-colors: (
  'primary': $primary,
  'secondary': $secondary,
  'success': $success,
  'info': $info,
  'warning': $warning,
  'danger': $danger,
  'light': $light,
  'dark': $dark
);

// Merge the maps
$theme-colors: map-merge($theme-colors, $custom-colors);

// Light theme variables
$light-theme: (
  'body-bg': $white,
  'body-color': $dark,
  'border-color': $gray-300,
  'light': $light,
  'dark': $dark,
  'accent-color': #3498db // New accent color for light theme
);

// Dark theme variables
$dark-theme: (
  'body-bg': #1a1a1a,
  // Slightly lighter than pure black
  'body-color': $light,
  'border-color': $gray-700,
  'light': $gray-900,
  'dark': $black,
  'accent-color': #2ecc71 // New accent color for dark theme
);

// Import the rest of Bootstrap
@import 'bootstrap/scss/bootstrap';

@mixin color-scheme-styles($theme) {
  --bs-body-bg: #{map-get($theme, 'body-bg')};
  --bs-body-color: #{map-get($theme, 'body-color')};
  --bs-border-color: #{map-get($theme, 'border-color')};
  --bs-light: #{map-get($theme, 'light')};
  --bs-dark: #{map-get($theme, 'dark')};

  @each $color, $value in $theme-colors {
    --bs-#{$color}: #{$value};
  }

  // Increase specificity and use !important to override Bootstrap defaults
  body {
    .bg-light {
      background-color: var(--bs-light) !important;
    }
    .bg-dark {
      background-color: var(--bs-dark) !important;
    }
    .text-light {
      color: var(--bs-light) !important;
    }
    .text-dark {
      color: var(--bs-dark) !important;
    }

    .card {
      border-color: var(--bs-border-color);
    }

    // Add these class overrides
    .ToggleSlider {
      background-color: var(--bs-secondary);
    }

    .ToggleSlider:before {
      background-color: var(--bs-white);
    }

    .ToggleInput:checked + .ToggleSlider {
      background-color: var(--bs-success);
    }

    .ToggleInput:focus + .ToggleSlider {
      box-shadow: 0 0 1px var(--bs-success);
    }

    .ToggleInput:disabled + .ToggleSlider {
      background-color: var(--bs-gray-200);
    }

    #enableStoploss:checked {
      background-color: var(--bs-danger);
      border-color: var(--bs-danger);
    }

    #enableTarget:checked {
      background-color: var(--bs-success);
      border-color: var(--bs-success);
    }

    // Add table styles
    .table,
    th,
    td {
      border: 1px solid var(--bs-border-color);
      border-collapse: collapse;
    }
    .table th {
      color: var(--bs-body-color);
      font-weight: 600;
    }
    .table > :not(caption) > * > * {
      color: var(--bs-body-color);
      border-bottom-color: var(--bs-border-color);
    }

    .input-group-text {
      color: var(--bs-body-color);
      background-color: var(--bs-input-bg);
      border-color: var(--bs-border-color);
    }

    .custom-bg-light {
      background-color: var(--bs-light) !important;
    }
  }
}

// Apply light theme by default
:root {
  @include color-scheme-styles($light-theme);
}

// Dark mode styles
@media (prefers-color-scheme: dark) {
  :root {
    @include color-scheme-styles($dark-theme);
  }

  // Explicitly override .bg-light for dark mode
  .bg-light {
    background-color: var(--bs-light) !important;
  }
}

// Define a mixin for dark mode styles
@mixin dark-mode-styles {
  --bs-light: #{map-get($dark-theme, 'light')};
  --bs-dark: #{map-get($dark-theme, 'dark')};
  --bs-text-muted: #a0a0a0;
  --bs-form-disabled-bg: #{lighten($gray-900, 5%)};
  --bs-form-disabled-color: #{$gray-600};
  --bs-accent-color: #{map-get($dark-theme, 'accent-color')};

  .bg-light {
    background-color: var(--bs-light) !important;
  }

  .bg-dark {
    background-color: var(--bs-dark) !important;
  }

  .text-muted {
    color: var(--bs-text-muted) !important;
  }

  // Styles for disabled form elements
  .form-control:disabled,
  .form-control[readonly],
  .form-select:disabled {
    background-color: var(--bs-form-disabled-bg);
    color: var(--bs-form-disabled-color);
    border-color: var(--bs-border-color);
  }

  // Additional styles for better visibility of placeholder text in disabled inputs
  .form-control:disabled::placeholder,
  .form-control[readonly]::placeholder,
  .form-select:disabled {
    color: var(--bs-form-disabled-color);
  }

  // Add this for text-muted
  .text-muted {
    color: #a0a0a0 !important; // Lighter gray for better visibility in dark mode
  }

  // Add other dark mode overrides here

  // Remove the custom gradient
  // --custom-gradient: linear-gradient(135deg, #2c3e50 0%, #4ca1af 100%);
}

// Apply dark mode styles to .dark-mode class
body.dark-mode {
  @include dark-mode-styles;
}

// Apply dark mode styles when prefers-color-scheme is dark
@media (prefers-color-scheme: dark) {
  body {
    @include dark-mode-styles;
  }
}

// Styles that don't change based on color scheme
.Navigation {
}
.Navigation__logo {
  height: 40px;
  width: 40px;
}
.active-route {
  border-radius: 0.25rem;
}
.Card {
  border-radius: $border-radius;
  padding: $spacer;
  width: 100%;
  height: 100%;
  display: flex;
  align-items: center;
  flex-direction: column;
  justify-content: center;
}

button:focus,
button:hover,
select,
option,
input:focus {
  outline: none;
  box-shadow: none !important;
}

.ToggleSwitch {
  position: relative;
  display: inline-block;
  width: 60px;
  height: 34px;
}

.ToggleInput {
  opacity: 0;
  width: 0;
  height: 0;
}

.ToggleLabel {
  margin-left: $spacer;
}

.ToggleSlider {
  position: absolute;
  cursor: pointer;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  transition: $transition-base;
}

.ToggleSlider:before {
  position: absolute;
  content: '';
  height: 26px;
  width: 26px;
  left: 4px;
  bottom: 4px;
  transition: $transition-base;
}

.ToggleInput:checked + .ToggleSlider:before {
  transform: translateX(26px);
}

.ToggleSlider.SliderRound {
  border-radius: 34px;
}

.ToggleSlider.SliderRound:before {
  border-radius: 50%;
}

.toast {
  position: fixed;
  top: 10%;
  left: 50%;
  transform: translateX(-50%);
  z-index: $zindex-toast;
  overflow: hidden;
}

.dropdown-menu {
  width: 100%;
  z-index: 99999;
}

.nav-link {
  color: inherit !important;
}

.broker-logo {
  max-height: 80px;
  width: auto;
}

.arrow_keys {
  max-height: 200px;
  width: auto;
}
.ltp-range-bar {
  display: block;
  overflow: hidden;
}

.ltp-range {
  position: relative;
  height: 8px;
  background-color: var(--bs-light);
  border: 1px solid var(--bs-border-color);
  margin: 0 10px;
  border-radius: 4px;
}

.ltp-range-fill {
  height: 100%;
  background-color: #adb5bd;
  border-radius: 4px 0 0 4px;
}

.ltp-range-marker {
  position: absolute;
  top: -4px;
  width: 16px; // Changed from 0 to 16px
  height: 16px;
  transform: translateX(-50%); // Center the marker on its position
  border-left: 8px solid transparent;
  border-right: 8px solid transparent;
  border-bottom: 8px solid var(--bs-secondary);
}
.ltp-range-open-marker {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  width: 10px;
  height: 10px;
  border-radius: 50%;
  background-color: var(--bs-secondary); /* Orange color for open price */
  border: 2px solid #fff;
  z-index: 2;
}

#events-iframe {
  width: 100%;
  height: 80vh;
  min-height: 300px;
  max-height: 800px;
}
.strategy-card {
  cursor: pointer;
  transition:
    transform 0.2s,
    box-shadow 0.2s;
}

.strategy-card:hover {
  transform: translateY(-5px);
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

.strategy-card:active {
  transform: translateY(-2px);
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

// Slim scrollbar styles
::-webkit-scrollbar {
  width: 8px;
  height: 8px;
}

::-webkit-scrollbar-track {
  background: var(--bs-body-bg);
}

::-webkit-scrollbar-thumb {
  background: var(--bs-body);
  border-radius: 4px;
}

::-webkit-scrollbar-thumb:hover {
  background: var(--bs-body);
}

// For Firefox
* {
  scrollbar-width: thin;
  scrollbar-color: var(--bs-body) var(--bs-body-bg);
  outline: none;
}

.MTM {
  position: sticky;
  top: 0;
  z-index: 1000;
  backdrop-filter: blur(5px);
  -webkit-backdrop-filter: blur(5px);
}
.NormalNavigationComponent {
  // position: sticky;
  // top: 0;
  // z-index: 1000;
  // backdrop-filter: blur(5px);
  // -webkit-backdrop-filter: blur(5px);
}
.TabContent {
  height: 500px;
}
.table-responsive {
  height: 500px;
  overflow: scroll;
}

.Steadfast-AI-Assistant {
}
@keyframes sparkle {
  0% {
    transform: scale(1) rotate(0deg);
    opacity: 1;
  }

  50% {
    transform: scale(1.2) rotate(10deg);
    opacity: 0.7;
  }

  100% {
    transform: scale(1) rotate(0deg);
    opacity: 1;
  }
}

.sparkle-icon {
  animation: sparkle 2s infinite;
}

// Add some new styles for better visual appeal
.card,
.btn,
.form-control,
.input-group-text {
  transition: all 0.3s ease;
}

.card:hover {
  transform: translateY(-5px);
  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
}

.btn-primary {
  background-color: var(--bs-accent-color);
  border-color: var(--bs-accent-color);
}

.btn-primary:hover {
  background-color: darken(map-get($light-theme, 'accent-color'), 10%);
  border-color: darken(map-get($light-theme, 'accent-color'), 10%);
}

.form-control:focus,
.btn:focus {
  box-shadow: 0 0 0 0.2rem rgba(map-get($light-theme, 'accent-color'), 0.25);
}

// Add a subtle background pattern
body {
  background-image: linear-gradient(to right, rgba(0, 0, 0, 0.05) 1px, transparent 1px),
    linear-gradient(to bottom, rgba(0, 0, 0, 0.05) 1px, transparent 1px);
  background-size: 20px 20px;
}

body.dark-mode {
  background-image: linear-gradient(to right, rgba(255, 255, 255, 0.05) 1px, transparent 1px),
    linear-gradient(to bottom, rgba(255, 255, 255, 0.05) 1px, transparent 1px);
}
